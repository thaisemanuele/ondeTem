package com.icmc.ic.bixomaps;

import com.icmc.ic.bixomaps.util.SystemUiHider;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.DialogInterface.OnDismissListener;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Toast;

/**
 * An example full-screen activity that shows and hides the system UI (i.e.
 * status bar and navigation/system bar) with user interaction.
 * 
 * @see SystemUiHider
 */
public class StartScreenActivity extends Activity {
	/**
	 * Whether or not the system UI should be auto-hidden after
	 * {@link #AUTO_HIDE_DELAY_MILLIS} milliseconds.
	 */
	private static final boolean AUTO_HIDE = true;

	/**
	 * If {@link #AUTO_HIDE} is set, the number of milliseconds to wait after
	 * user interaction before hiding the system UI.
	 */
	private static final int AUTO_HIDE_DELAY_MILLIS = 0;

	/**
	 * If set, will toggle the system UI visibility upon interaction. Otherwise,
	 * will show the system UI visibility upon interaction.
	 */
	private static final boolean TOGGLE_ON_CLICK = true;

	/**
	 * The flags to pass to {@link SystemUiHider#getInstance}.
	 */
	private static final int HIDER_FLAGS = SystemUiHider.FLAG_HIDE_NAVIGATION;

	/**
	 * The instance of the {@link SystemUiHider} for this activity.
	 */
	private SystemUiHider mSystemUiHider;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_start_screen);

		final View controlsView = findViewById(R.id.fullscreen_content_controls);
		
		// Set up an instance of SystemUiHider to control the system UI for
		// this activity.
		mSystemUiHider = SystemUiHider.getInstance(this, controlsView,
				HIDER_FLAGS);
		mSystemUiHider.setup();
		
		Context context = this.getApplicationContext();
		Starter start = new Starter(context,
				new AsyncResponse(){
			
			/*Handles the response*/
			@Override
			public Void processFinish(String[] result) {
				/*Couldn't find location*/
				if(result[0].equalsIgnoreCase("0.0")){
					Toast toast = Toast.makeText(getApplicationContext(), R.string.location_unavailable, 10);
					toast.show();
					
					AlertDialog checkin = new AlertDialog.Builder(StartScreenActivity.this)
				    .setTitle(getString(R.string.needs_gps))
				    .setMessage(getString(R.string.open_settings))
				    .setPositiveButton(android.R.string.yes, 
				    		new DialogInterface.OnClickListener() {
				    			public void onClick(DialogInterface dialog, int which) {
				    			//Open the location service
				    			startActivityForResult(new Intent(
				    					android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS),0);
				    			finish();
				    			}
				     })
				    .setIcon(getResources().getDrawable(R.drawable.ic_check_un)).create();
				    checkin.show();
				    
					checkin.setOnDismissListener(new OnDismissListener(){

						@Override
						public void onDismiss(DialogInterface dialog) {
							finish();
							
						}
						
					});
					
				}
				/*Location found*/
				else if(result[0].equalsIgnoreCase("1.0")){
					 Intent intent = new Intent(StartScreenActivity.this, MainActivity.class);
					  intent.putExtra("lat", result[1]);
					  intent.putExtra("lon", result[2]);
					  startActivity(intent);
				}
				return null;
			}
			
		});
		start.execute(""); 
	}
	
	protected void onResume(Bundle savedInstanceState) {
		super.onResume();

		setContentView(R.layout.activity_start_screen);

		final View controlsView = findViewById(R.id.fullscreen_content_controls);
		
		mSystemUiHider = SystemUiHider.getInstance(this, controlsView,
				HIDER_FLAGS);
		mSystemUiHider.setup();
		
		Context context = this.getApplicationContext();
		Starter start = new Starter(context,
				new AsyncResponse(){

			@Override
			public Void processFinish(String[] result) {
				if(result[0].equalsIgnoreCase("0.0")){
					Toast toast = Toast.makeText(getApplicationContext(), R.string.location_unavailable, 10);
					toast.show();
					
					AlertDialog checkin = new AlertDialog.Builder(StartScreenActivity.this)
				    .setTitle(getString(R.string.needs_gps))
				    .setMessage(getString(R.string.open_settings))
				    .setPositiveButton(android.R.string.yes, 
				    		new DialogInterface.OnClickListener() {
				    			public void onClick(DialogInterface dialog, int which) {
				    			
				    				finish();
				    			//startActivityForResult(new Intent(
				    					//android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS),0);
				        }
				     })
				    .setIcon(getResources().getDrawable(R.drawable.ic_check_un)).create();
				    checkin.show();
				    
					checkin.setOnDismissListener(new OnDismissListener(){

						@Override
						public void onDismiss(DialogInterface dialog) {
							finish();
							
						}
						
					});

				}else if(result[0].equalsIgnoreCase("1.0")){
					 Intent intent = new Intent(StartScreenActivity.this, MainActivity.class);
					  intent.putExtra("lat", result[1]);
					  intent.putExtra("lon", result[2]);
					  startActivity(intent);
				}
				return null;
			}
			
		});
		start.execute(""); //execute String[] is ambiguous for the type Stater
		
	}


	@Override
	protected void onPostCreate(Bundle savedInstanceState) {
		super.onPostCreate(savedInstanceState);

		// Trigger the initial hide() shortly after the activity has been
		// created, to briefly hint to the user that UI controls
		// are available.
		delayedHide(100);
	}

	/**
	 * Touch listener to use for in-layout UI controls to delay hiding the
	 * system UI. This is to prevent the jarring behavior of controls going away
	 * while interacting with activity UI.
	 */
	View.OnTouchListener mDelayHideTouchListener = new View.OnTouchListener() {
		@Override
		public boolean onTouch(View view, MotionEvent motionEvent) {
			if (AUTO_HIDE) {
				delayedHide(AUTO_HIDE_DELAY_MILLIS);
			}
			return false;
		}
	};

	Handler mHideHandler = new Handler();
	Runnable mHideRunnable = new Runnable() {
		@Override
		public void run() {
			mSystemUiHider.hide();
		}
	};

	/**
	 * Schedules a call to hide() in [delay] milliseconds, canceling any
	 * previously scheduled calls.
	 */
	private void delayedHide(int delayMillis) {
		mHideHandler.removeCallbacks(mHideRunnable);
		mHideHandler.postDelayed(mHideRunnable, delayMillis);
	}

	
	
}
